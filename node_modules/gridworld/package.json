{
  "name": "gridworld",
  "version": "0.1.3",
  "description": "2D gridworld representation and canvas renderer, intended for experimentation with various game algorithms.",
  "main": "index.js",
  "keywords": [
    "grid",
    "world",
    "2d",
    "games"
  ],
  "author": {
    "name": "Jason Frame",
    "email": "jason@onehackoranother.com",
    "url": "jasonframe.co.uk"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/jaz303/gridworld.git"
  },
  "readme": "# gridworld\n\nThis is a small module that provides a representation and canvas renderer for 2D \"gridworlds\". Its intended use is for experimentation with game and AI algorithms such as pathfinding, line-of-sight, plus any number of grid-based board games.\n\nHere's what it looks like:\n\n![Gridworld](https://raw.github.com/jaz303/gridworld/master/screenshot.png)\n\n## Installation\n\nBrowserify is recommended.\n\n    $ npm install gridworld\n\n## API\n\n### Creating a world\n\n#### `new GridWorld(canvasEl, width, height, [options])`\n\nCreate a new `GridWorld` with a given `width` and `height` (specified in terms of grid cells) that will draw onto `canvas`.\n\nSupported options:\n\n  * `cellSize` size of each cell in pixels. Default: 32.\n  * `cellPadding` size between each cell in pixels. Default: 1.\n  * `drawBorder` if set, a border will be drawn around the entire world, instead of just between each cell.\n  * `borderColor` default: `'black'`.\n  * `backgroundColor` default cell background color. Default: `'white'`.\n  * `resizeCanvas` if set, canvas element will be resized to fit world's dimensions, including any specified padding.\n  * `padding` how much space to leave around the rendered world. Can be specified as a single number or as an object with keys `top`, `right`, `bottom` and `left`. Mostly useful with `resizeCanvas` option. Default: 0.\n  * `onclick` click handler for cells. See event handling, below.\n  \nExample:\n\n    var GridWorld = require('gridworld').GridWorld;\n    var world = new GridWorld(canvas, map[0].length, map.length, {\n      padding       : {top: 10, left: 10, right: 10, bottom: 60},\n      cellSize      : 32,\n      cellSpacing   : 1,\n      resizeCanvas  : true,\n      drawBorder    : true,\n      onclick: function(node) {\n        console.log(\"you clicked on node: \" + node);\n      }\n    });\n\n### Drawing the world\n\n#### `world.draw()`\n\nDraws the world on its canvas.\n\n### Accessing nodes directly\n\n#### `world.get(x, y)`\n\nReturns the node object representing cell at (`x`,`y`).\n\n### World attributes\n\n#### `world.getBackgroundColor(x, y)`\n\nReturns the background color of the node at (`x`,`y`).\n\n#### `world.setBackgroundColor(x, y, color)`\n\nSet the background color of the node at (`x`,`y`) to `color`.\n\n#### `world.isBlocked(x, y)`\n\nReturns `true` if the node at (`x`, `y`) is blocked.\n\n#### `world.setBlocked(x, y, blocked)`\n\nFlag the cell at (`x`, `y`) as passable/impassable. A cell's passability does not affect how it is drawn.\n\n#### `world.setAttribute(x, y, attr, value)`\n\nSet arbitrary attribute `attr` on node (`x`,`y`) to `value`.\n\n### Iterating\n\n#### `world.eachNeighbour(x, y, callback)`\n\nIterate over each non-blocked Manhattan neighbour of node (`x`,`y`). Callback receives neighbour node object and index as a parameter.\n\n#### `world.eachNodeNeighbour(node, callback)`\n\nIterate over each non-blocked Manhattan neighbour of `node`. Callback receives neighbour node object and index as a parameter.\n\n#### `world.eachNode(callback)`\n\nIterate over each of the world's `node` objects. Callback receives node object as a parameter.\n\n### Event Handling\n\n#### `world.onclick = function(node) { /* ... */ }`\n\nFunction to invoke when user clicks on a node. Receives clicked node as a paremeter.\n\n## TODO\n\n  * Add event handlers for dragging\n  * Allow markers to be overlaid on cells\n  * Support optional diagonal neighbours\n",
  "readmeFilename": "README.md",
  "_id": "gridworld@0.1.3",
  "dist": {
    "shasum": "11cc67bda333e928f5dad5d49201fe1aaeea7ed7",
    "tarball": "https://registry.npmjs.org/gridworld/-/gridworld-0.1.3.tgz"
  },
  "_from": "gridworld@latest",
  "_npmVersion": "1.2.18",
  "_npmUser": {
    "name": "jaz303",
    "email": "jason@onehackoranother.com"
  },
  "maintainers": [
    {
      "name": "jaz303",
      "email": "jason@onehackoranother.com"
    }
  ],
  "directories": {},
  "_shasum": "11cc67bda333e928f5dad5d49201fe1aaeea7ed7",
  "_resolved": "https://registry.npmjs.org/gridworld/-/gridworld-0.1.3.tgz"
}
