#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('SquareSmash:server');
var http = require('http');
var server_module = require('../helpers/server_module.js');

var gameUserCount = {};
var numUsers = 0;
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var io = require('socket.io')(server);

/**
 * Socket functionality Server side
 */
io.on('connection', function (socket) {
    var addedUser = false;

    // when the client emits 'new message', this listens and executes
    socket.on('new message', function (data) {
        console.log("did I come here");
        // we tell the client to execute 'new message'
        socket.broadcast.emit('new message', {
            username: socket.username,
            message: data
        });
    });

    // when the client emits 'add user', this listens and executes
    socket.on('add user', function (username, room, color) {
        if (addedUser) return;

        // we store the username in the socket session for this client
        socket.username = username;
        socket.room = room;
        socket.join(room);

        var response_code = 200;
        var response_game_users = null;
        var response_grid = null;
        var broadcast_payload = {};
        server_module.insertGameUser(username, room, color, function callback(response){
            response_code = response.response_code;
            response_game_users = response.game_users;
            server_module.getGameGrid(room, function callback(grid_response){
                var grid_response_code = grid_response.response_code;
                response_grid = grid_response.game_grid;

                /* Get the Game Grid */
                if (response_code == 200 && response_game_users.length >= 2){
                    /* Successfully Got the grid and Users.. GAME STARTS NOW */
                    if (grid_response_code  == 200 &&  response_grid.length > 0){
                        broadcast_payload = {
                            game_grid: response_grid,
                            game_users: response_game_users,
                            room: room,
                            response_code: 200
                        };
                        if (response_game_users.length == 2) {
                            /* Update Game status to in_progress */
                            server_module.updateGameStatus(room, 'in_progress', function callback(game_resp) {
                                game_response = game_resp.response_code;
                                if (game_response == 200) {
                                    socket.broadcast.to(room).emit('game join', broadcast_payload);
                                }
                                else {
                                    /* Error Updating game status */
                                    broadcast_payload = {
                                        game_grid: null,
                                        game_users: response_game_users,
                                        room: room,
                                        response_code: 400
                                    };
                                    socket.broadcast.to(room).emit('game error', broadcast_payload);
                                }
                            });
                        }
                        else {
                            /* Broadcast Game join event */
                            socket.broadcast.to(room).emit('game join', broadcast_payload);
                        }
                    }
                    else{
                        /* Error in the grid.. GAME ERROR */
                        broadcast_payload = {
                            game_grid: null,
                            game_users: response_game_users,
                            room: room,
                            response_code: 400
                        };
                        socket.broadcast.to(room).emit('game error', broadcast_payload);
                    }
                }
                else if (response_code == 200 && response_game_users.length == 1) {
                    /* Successfully Got the grid and but only one user..  WAIT for some one to join */
                    if (grid_response_code  == 200 &&  response_grid.length > 0){
                        broadcast_payload = {
                            game_grid: response_grid,
                            game_users: response_game_users,
                            room: room,
                            response_code: 200
                        };
                        socket.broadcast.to(room).emit('game wait', broadcast_payload);
                    }
                    else{
                        /* Error in the grid.. GAME ERROR */
                        broadcast_payload = {
                            game_grid: null,
                            game_users: response_game_users,
                            room: room,
                            response_code: 400
                        };
                        socket.broadcast.to(room).emit('game error', broadcast_payload);
                    }
                }
                else {
                    /* Error in the user.. GAME ERROR */
                    broadcast_payload = {
                        game_grid: response_grid,
                        game_users: null,
                        room: room,
                        response_code: 400
                    };
                    socket.broadcast.to(room).emit('game error', broadcast_payload);
                }

            });

        });
    });

    // when the client emits 'typing', we broadcast it to others
    socket.on('typing', function () {
        socket.broadcast.emit('typing', {
            username: socket.username
        });
    });

    // when the client emits 'stop typing', we broadcast it to others
    socket.on('stop typing', function () {
        socket.broadcast.emit('stop typing', {
            username: socket.username
        });
    });

    // when the user disconnects.. perform this
    socket.on('disconnect', function () {
        if (addedUser) {
            --numUsers;

            // echo globally that this client has left
            socket.broadcast.emit('user left', {
                username: socket.username,
                numUsers: numUsers
            });
        }
    });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
