#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('SquareSmash:server');
var http = require('http');
var server_module = require('../helpers/server_module.js');

var gameUserCount = {};
var numUsers = 0;
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var io = require('socket.io')(server);

/**
 * Socket functionality Server side
 */
// TODO: ADD LOCKING TO ALL SERVER EVENTS
io.on('connection', function (socket) {

    // When the add tries to join a game...
    // 1) Check if max_users is exceeded or not
    // 2) If not add the user, update his color
    // 3) Start game if Users >= 2
    // 4) Update game status
    // 5) Broad events accordinly
    socket.on('add user', function (username, room, color) {

        // we store the username in the socket session for this client
        socket.username = username;
        socket.room = room;
        socket.join(room);

        var response_code = 200;
        var response_game_users = null;
        var response_grid = null;
        var broadcast_payload = {};
        server_module.insertGameUser(username, room, color, function callback(response){
            response_code = response.response_code;
            response_game_users = response.game_users;
            server_module.getGameGrid(room, function callback(grid_response){
                var grid_response_code = grid_response.response_code;
                response_grid = grid_response.game_grid;

                /* Get the Game Grid */
                if (response_code == 200 && response_game_users.length >= 2){
                    /* Successfully Got the grid and Users.. GAME STARTS NOW */
                    if (grid_response_code  == 200 &&  response_grid.length > 0){
                        broadcast_payload = {
                            game_grid: response_grid,
                            game_users: response_game_users,
                            room: room,
                            response_code: 200
                        };
                        if (response_game_users.length == 2) {
                            /* Update Game status to in_progress */
                            server_module.updateGameStatus(room, 'in_progress', function callback(game_resp) {
                                game_response = game_resp.response_code;
                                if (game_response == 200) {
                                    socket.broadcast.to(room).emit('game join', broadcast_payload);
                                }
                                else {
                                    /* Error Updating game status */
                                    broadcast_payload = {
                                        game_grid: null,
                                        game_users: response_game_users,
                                        room: room,
                                        response_code: 400
                                    };
                                    socket.broadcast.to(room).emit('game error', broadcast_payload);
                                }
                            });
                        }
                        else {
                            /* Broadcast Game join event */
                            socket.broadcast.to(room).emit('game join', broadcast_payload);
                        }
                    }
                    else{
                        /* Error in the grid.. GAME ERROR */
                        broadcast_payload = {
                            game_grid: null,
                            game_users: response_game_users,
                            room: room,
                            response_code: 400
                        };
                        socket.broadcast.to(room).emit('game error', broadcast_payload);
                    }
                }
                else if (response_code == 200 && response_game_users.length == 1) {
                    /* Successfully Got the grid and but only one user..  WAIT for some one to join */
                    if (grid_response_code  == 200 &&  response_grid.length > 0){
                        broadcast_payload = {
                            game_grid: response_grid,
                            game_users: response_game_users,
                            room: room,
                            response_code: 200
                        };
                        socket.broadcast.to(room).emit('game wait', broadcast_payload);
                    }
                    else{
                        /* Error in the grid.. GAME ERROR */
                        broadcast_payload = {
                            game_grid: null,
                            game_users: response_game_users,
                            room: room,
                            response_code: 400
                        };
                        socket.broadcast.to(room).emit('game error', broadcast_payload);
                    }
                }
                else {
                    /* Error in the user.. GAME ERROR */
                    broadcast_payload = {
                        game_grid: response_grid,
                        game_users: null,
                        room: room,
                        response_code: 400
                    };
                    socket.broadcast.to(room).emit('game error', broadcast_payload);
                }

            });

        });
    });

    // When the user clicks on a grid, Check if
    // 1) A valid click
    // 2) If game is over
    // 3) If game is not over, wait for some time and resume
    // 4) Broadcast events accordingly
    socket.on('user click', function (username, room, color, row_id, column_id) {
        var response_game_users = null;
        var response_grid = null;
        var broadcast_payload = {};

        var game_winners = null;
        var game_status = 'in_progress';
        server_module.updateGridCell(room, color, row_id, column_id, function callback(response) {
            var grid_response_code = response.response_code;
            response_grid = response.game_grid;
            if (grid_response_code  == 200 &&  response_grid.length > 0){
                server_module.updateUserScore(room, username, function callback(game_user_response){
                    var game_user_response_code = game_user_response.response_code;
                    response_game_users = game_user_response.game_users;
                    if (game_user_response_code  == 200){
                        /* Updated the Grid Cell and User Score successfully.. Check Game status */
                        server_module.checkAndUpdateGameStatus(response_grid, response_game_users, room,
                            function callback(game_user_response){
                                var game_user_res = game_user_response.response_code;
                                game_winners = game_user_response.game_winners;
                                game_status = game_user_response.game_status;
                                if (game_status == 'completed'){
                                    /* GAME OVER */
                                    broadcast_payload = {
                                        game_grid: response_grid,
                                        game_users: response_game_users,
                                        game_winners: game_winners,
                                        game_status: game_status,
                                        room: room,
                                        response_code: 200
                                    };
                                    socket.broadcast.to(room).emit('game over', broadcast_payload);
                                }
                                else{

                                    broadcast_payload = {
                                        game_grid: response_grid,
                                        game_users: response_game_users,
                                        room: room,
                                        response_code: 200
                                    };

                                    /* Emit game wait event to updated grid cells and user score */
                                    socket.broadcast.to(room).emit('game wait', broadcast_payload);
                                    setTimeout(function(){
                                        /* Wait before re-starting the click process on client side */
                                        socket.broadcast.to(room).emit('game resume', broadcast_payload);
                                    }, server_module.refresh_time);
                                }
                            });
                    }
                    else{
                        /* Error in the user.. GAME ERROR */
                        broadcast_payload = {
                            game_grid: response_grid,
                            game_users: null,
                            room: room,
                            response_code: 400
                        };
                        socket.broadcast.to(room).emit('game error', broadcast_payload);
                    }
                });
            }
            else{
                /* Error in the user.. GAME ERROR */
                broadcast_payload = {
                    game_grid: null,
                    game_users: null,
                    room: room,
                    response_code: 400
                };
                socket.broadcast.to(room).emit('game error', broadcast_payload);
            }
        });
    });

    // when the user disconnects..
    // 1) Update the User Status
    // 2) Check if the GameRoom is underplayed
    // 3) Broadcast events accordingly
    socket.on('disconnect', function () {
        server_module.updateGameUserStatus(room, username, '0', function callback(response){
            var update_response_code = response.response_code;
            var game_users = response.game_users;
            var active_users = response.active_users;
            if (update_response_code == 200 && active_users <= 1){
                /* No more active users so go back to GAME WAIT */
                broadcast_payload = {
                    room: room,
                    response_code: 200
                };
                socket.broadcast.to(room).emit('game wait', broadcast_payload);
            }
            else if (update_response_code == 400){
                /* Error in the user.. GAME ERROR */
                broadcast_payload = {
                    game_grid: null,
                    game_users: null,
                    room: room,
                    response_code: 400
                };
                socket.broadcast.to(room).emit('game error', broadcast_payload);
            }
        });
    });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
